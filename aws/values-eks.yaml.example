# Paramify Helm configuration example for AWS EKS
#
# Example install:
#   helm registry login registry.paramify.com --username paramify@mycompany.com --password <license_id>
#   helm install paramify oci://registry.paramify.com/paramify/paramify --namespace paramify --values ~/values-eks.yaml
#   helm upgrade paramify oci://registry.paramify.com/paramify/paramify --namespace paramify --values ~/values-eks.yaml

# Paramify main application endpoint (recommend DNS entry and SSL cert)
services:
  paramify:
    type: LoadBalancer  # optionally ClusterIP or NodePort (NOTE: For ALB see "ingresses" below)
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:<region>:<account_id>:certificate/<guid>"  # replace with your SSL cert
      service.beta.kubernetes.io/aws-load-balancer-ssl-ports: http
      service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https
      service.beta.kubernetes.io/load-balancer-source-ranges: "192.168.0.1/32"  # replace with your IP addresses, or remove for public access
    ports:
      http:
        nodePort: null  # set preferred port (30000-32767) or null to autoassign
        port: 443

# To optionally use an ALB, set above service type to ClusterIP and comment out all service annotations, then uncomment the following and customize
# ingresses:
#   paramify:
#     enabled: true
#     ingressClassName: "alb"
#     annotations:
#       kubernetes.io/ingress.class: "alb"
#       alb.ingress.kubernetes.io/load-balancer-name: "paramify-alb"
#       alb.ingress.kubernetes.io/scheme: "internet-facing"  # or "internal"
#       alb.ingress.kubernetes.io/target-type: "ip"
#       alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
#       alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:<region>:<account_id>:certificate/<guid>"  # replace with your SSL cert
#       alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS13-1-2-FIPS-2023-04  # specify desired ssl policy
#       alb.ingress.kubernetes.io/healthcheck-path: /health-check
#       alb.ingress.kubernetes.io/healthcheck-port: traffic-port
#       alb.ingress.kubernetes.io/healthcheck-protocol: HTTPS
#       alb.ingress.kubernetes.io/healthcheck-interval-seconds: "10"
#       alb.ingress.kubernetes.io/backend-protocol: HTTPS
#       alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=180
#     hosts:
#     - host: 'paramify.mycompany.com'
#       paths:
#       - path: /
#         pathType: Prefix
#         service:
#           name: paramify
#           port: 3000
#     # tls:
#     # - hosts:
#     #   - 'paramify.mycompany.com'
#     #   secretName: paramify-app-tls

apps:
  admission:
    containers:
      admission:
        env:
        - name: WHITELISTED_REGISTRIES  # Comma-separated list of whitelisted registries for image validation
          value: "registry.paramify.com,proxy.paramify.com,ghcr.io,cgr.dev,kotsadm,minio,rqlite,openebs,602401143452.dkr.ecr.us-west-2.amazonaws.com"  # update the AWS domain for your region from https://docs.aws.amazon.com/eks/latest/userguide/add-ons-images.html
#         # For Helm airgap replace the images with your internal registry (and add your registry in the registries list above)
#         image:
#           repository: proxy.paramify.com/proxy/paramify/041462616641.dkr.ecr.us-west-2.amazonaws.com/admission
#           tag: "abc123@sha256:abc123...abc123"
#   paramify:
#     containers:
#       paramify:
#         image:
#           repository: proxy.paramify.com/proxy/paramify/041462616641.dkr.ecr.us-west-2.amazonaws.com/paramify
#           tag: "abc123@sha256:abc123...abc123"
#     # Optionally reference secret with custom SSL cert for container (data with tls.key/tls.cert)
#     volumes:
#     - name: paramify-secrets
#       secret:
#         secretName: paramify-custom-tls
#   document-robot:
#     containers:
#       document-robot:
#         image:
#           repository: proxy.paramify.com/proxy/paramify/041462616641.dkr.ecr.us-west-2.amazonaws.com/document-robot
#           tag: "abc123@sha256:abc123...abc123"
# # Optionally set the SDK image when using custom registry (for airgap)
# replicated:
#   isAirgap: true
#   images:  # deprecated for "image" below with release 1.44.0
#     replicated-sdk: replicated/replicated-sdk:abc123
#   image:
#     repository: "replicated/replicated-sdk"
#     tag: "abc123"

# Custom environment configuration (replace <val> entries)
configmaps:
  paramify:
    data:
      ADMIN_EMAIL: "admin@invalid.mail"  # Comma-delimited list of admin users to create on startup
      APP_BASE_URL: "https://paramify"  # The base URL of the Paramify application (e.g., https://paramify.mycompany.com)
      DOCUMENT_ROBOT_BASE_URL: "https://document-robot"  # The internal URL of the Document Robot application (rarely changed)
      AUTH_SMTP_ENABLED: "false"  # Set to true to enable authentication via SMTP email
      AUTH_GOOGLE_ENABLED: "false"  # Set to true to enable authentication via Google
      AUTH_GOOGLE_CLIENT_ID: "google_client_id"  # The client ID for Google authentication
      AUTH_MICROSOFT_ENABLED: "false"  # Set to true to enable authentication via Microsoft
      AUTH_MICROSOFT_CLIENT_ID: "microsoft_client_id"  # The client ID for Microsoft authentication
      AUTH_MICROSOFT_TRUST_AD_EMAIL: "true"  # Set to true to trust AD email for Microsoft authentication ()
      AUTH_MICROSOFT_GOVCLOUD: "false"  # Set to true when using Microsoft Government Cloud
      AUTH_OKTA_ENABLED: "false"  # Set to true to enable authentication via Okta
      AUTH_OKTA_DOMAIN: "okta_domain"  # The Okta domain (e.g., mycompany.okta.com)
      AUTH_OKTA_CLIENT_ID: "okta_client_id"  # The client ID for Okta authentication
      AWS_REGION: "<region>"  # AWS region
      AWS_STORAGE_BUCKET_NAME: "paramify-company-s3"  # Name of the AWS S3 bucket for storage
      AWS_USE_FIPS_ENDPOINT: "false"  # Set to true to use FIPS endpoints for AWS S3
      SMTP_ENABLED: "false"  # Set to true to enable sending email via SMTP
      SMTP_FROM: "user@invalid.mail"  # "From" email address in emails sent by Paramify
      SMTP_HOST: "localhost"  # Hostname of the SMTP server
      SMTP_PORT: "465"  # Port of the SMTP server
      SMTP_USER: "user@invalid.mail"  # Username for the SMTP server
  document-robot:
    data:
      STORAGE_PROVIDER: "AWSS3"
      AWS_S3_BUCKET: "paramify-mycompany-s3"  # Name of the AWS S3 bucket for Document Robot
      AWS_REGION: "<region>"  # AWS region

secrets:
  paramify:
    data:
      AUTH_GOOGLE_CLIENT_SECRET: secret  # Client secret for Google authentication
      AUTH_MICROSOFT_CLIENT_SECRET: secret  # Client secret for Microsoft authentication
      AUTH_OKTA_CLIENT_SECRET: secret  # Client secret for Okta authentication
      MAGIC_LINK_SECRET: secret  # Secret key for email-based magic link authentication
      SESSION_SECRET: secret  # Secret key for session management
      SMTP_PASSWORD: password  # Password for SMTP server (if SMTP is enabled)

serviceAccounts:
  paramify:
    annotations:
      eks.amazonaws.com/role-arn: "arn:aws:iam::<account_id>:role/paramify-mycompany-eks-sa-role"  # replace with your IAM role

paramify:
  admission:
    enabled: false  # optionally enable for admission webhook preventing unknown image sources
  #postgresPassword: "<password>"  # password for container-based embedded PostgreSQL db (not recommended)
  externalPostgresql:
    enabled: true  # Set to true (recommended) to use an external PostgreSQL database instead of embedded
    username: "paramify"  # Username for the external PostgreSQL database
    database: "paramify"  # Database name for the external PostgreSQL database
    password: "password"  # Password for the external PostgreSQL database
    host: "paramify-mycompany-db.<guid>.<region>.rds.amazonaws.com"  # Hostname of the external PostgreSQL database
    port: 5432  # Port of the external PostgreSQL database
  pgbackup:
    enabled: false  # automated daily backup for container db (recommended if using embedded PostreSQL db)

